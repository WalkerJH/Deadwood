We implemented the Model-View-Controller design pattern, with Deadwood.java as our Controller class, with Coordinates as a supporting class to communicate the location of different spots on the board between the Model and the View. We kept most of Deadwood.java's methods static to keep access easy in both the View and the Model. Our View classes consist of DeadwoodGUI.java, DeadwoodJButton.java, CardJLabel.java, and ShotCounterJLable.java. These classes have no direct dependencies on methods from the Model. Our Model had to be slightly changed to implement the new Controller classes, but overall stayed mostly the same. There is one direct dependency in the Model on the View for player token size, but we felt that keeping that variable in the Controller would have violated cohesion, and that having a static reference to a variable that most if not all Deadwood GUIs would have was an acceptable design choice. We chose not to implement Observer or other highly abstract design patterns due to the relatively limited use case options in Deadwood. If this had been a more complex project, or we were planning to continue extending this code, we would have likely looked into that more. 